/*
Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.

IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots ("."), e.g.,172.16.254.1;

Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.

But as per question in IPv6 leading zeros are allowed, but no extra leading zeros
Example 2001:0db8:85a3:0:0:8A2E:0370:7334 is allowed, but 02001:0db8:85a3:0:0:8A2E:0370:7334 is not allowed as in first set there are 5 numbers and 0 is extra.
*/
import java.util.regex.*; 
class Solution 
{
    public String validIPAddress(String IP) 
    {
        /*first [0-9] is for single digit numbers, then for 2 digit numbers, third combination is for three digit numbers less than 200, 
          followed by combination for 200 to 249 and last 250 to 255 is handled*/
        if(IP.matches("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"))
        {
            return "IPv4";
        }
        /* Here the complexity is less as it can be any character low case or high cse or a number from 0 to 9 followed by a semicolor in 8 such sets,the last set is mentioned            seperately as the initial sets are followed by a semi color while the last set does not have a semi colon*/
        else if(IP.matches("(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})"))
        {
            return "IPv6";
        }
        else
        {
            return "Neither";    
        }
    }
}